package main

import (
	"bytes"
	"crypto/md5"
	"io"
)

type user struct {
	username string
	pass     string
}

func getUsersAandDecryptPasswords(data []byte) ([]user, error) {
	var result []user
	sliceData := bytes.Split(data, []byte("M2"))[1:]
	for _, data := range sliceData {
		name, pass := extractUserAndPassword(data)
		passowrd, err := decryptPass(name, pass)
		if err != nil {
			return nil, err
		}
		result = append(result, user{username: string(name), pass: string(passowrd)})
	}
	return result, nil
}
func extractUserAndPassword(data []byte) (name []byte, pass []byte) {
	username := bytes.Split(data, []byte("\x01\x00\x00\x21"))[1]
	userpass := bytes.Split(data, []byte("\x11\x00\x00\x21"))[1]
	name = username[1 : 1+int(username[0])]
	pass = userpass[1 : 1+int(userpass[0])]
	return name, pass
}
func decryptPass(name []byte, encryptpass []byte) ([]byte, error) {
	var pass []byte
	magicKey := []byte("283i4jfkai3389")
	data := md5.New()
	if _, err := io.WriteString(data, string(name)+string(magicKey)); err != nil {
		return nil, err
	}
	digitKey := data.Sum(nil)
	for i := range encryptpass {
		pass = append(pass, encryptpass[i]^digitKey[i%len(digitKey)])
	}
	return pass, nil
}
